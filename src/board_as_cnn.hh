#pragma once

#include <robots_core/board.hh>
#include <array>

namespace board_as_cnn {



struct InputBuilder {
  constexpr static uint8_t NExtraInput = 5;
  constexpr static uint8_t NCnnInput = robots_core::NOccupantTypes - 1 + NExtraInput; //not representing OOB

  using CnnInputBottomLayer = std::array< float, NCnnInput >;
  using CnnInputMiddleLayer = std::array< CnnInputBottomLayer, robots_core::Board::HEIGHT >;
  using CnnInput = std::array< CnnInputMiddleLayer, robots_core::Board::WIDTH >;

  // 0: N safe tele remaining
  // 1: N robots remaining
  // 2: Cell is a valid move
  // 3: Cell is a cascade-safe move
  // 4: N robots killed if you move there

  static
  void
  enhance_board(
    CnnInput & inp,
    bool const flip_horiz,
    bool const flip_vert
  ){
    for( CnnInputMiddleLayer & a : inp ){
      for( CnnInputBottomLayer & b : a ){
	b.fill( 0.0 );
      }
    }
  }
};

using InputBuilder::CnnInput;

//9 moves + teleport
using CnnOutput = std::array< float, 10 >;

struct CnnIO {
  CnnInput  i;
  CnnOutput o;
};

CnnIO
make_input_and_output(
  robots_core::Game const & game,
  
){
  CnnIO io;

  bool const flip_horiz = game.board().human_position().x > (robots_core::Board::WIDTH / 2);
  bool const flip_vert = game.board().human_position().y > (robots_core::Board::HEIGHT / 2);

  //rotate_board

  //input
  

  return io;
}

/* Example data line:

*/

} //board_as_cnn
